---
// @ts-nocheck
import Layout from "../../layouts/Layout.astro";
import MainHead from "../../components/MainHead.astro";
import MainSide from "../../components/MainSide.astro";
import MainText from "../../components/MainText.astro";
import MainName from "../../components/MainName.astro";
import SepLinks from "../../components/SepLinks.astro";
import FancyPara from "../../components/FancyPara.astro";
import type { JsonData, Release } from "../../types";
import {
  artist_name,
  link_site,
  release_artist_names,
  release_has_score,
  release_image_src,
  release_kind,
  release_score,
} from "../../functions";

const response = await fetch(
  "https://mjk-decades.s3.eu-west-2.amazonaws.com/db.json"
);
const data = (await response.json()) as JsonData;
const { id } = Astro.params;

let release: Release;

if (id && id in data.releases) {
  const json = data.releases[id];

  release = {
    ...json,
    label:
      json.label_id && json.label_id in data.labels
        ? { ...data.labels[json.label_id], releases: [] }
        : null,
    artists: json.artist_ids
      .filter((id) => id in data.artists)
      .map((id) => ({
        ...data.artists[id],
        releases: [],
      })),
    genres: json.genre_id_ords
      .filter(({ id }) => id in data.genres)
      .map(({ id, ord }) => ({
        ord,
        ...data.genres[id],
        parents: [],
        sub_genres: [],
        releases: [],
      })),
  };
} else {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

const year = release.date.substring(0, 4);
const main_genres = release.genres.filter((g) => g.ord < 100);
const other_genres = release.genres.filter((g) => g.ord > 100);

const STREAMERS: Record<string, string> = {
  "bandcamp.com": "Bandcamp",
  "soundcloud.com": "SoundCloud",
  "music.youtube.com": "YouTube Music",
  "spotify.com": "Spotify",
  "apple.com": "Apple",
  "deezer.com": "Deezer",
  // "youtube.com": "YouTube",
};

const SITE_NAMES: Record<string, string> = {
  "wikipedia.org": "Wikipedia",
  "wikidata.org": "WikiData",
  "musicbrainz.org": "MusicBrainz",
  "discogs.com": "Discogs",
  "allmusic.com": "AllMusic",
  "progarchives.com": "ProgArchives",
  "rateyourmusic.com": "RateYourMusic",
  "albumoftheyear.org": "AlbumOfTheYear",
};

const REVIEWS: Record<string, string> = {
  "bbc.co.uk": "BBC",
  "theguardian.com": "The Guardian",
  "pitchfork.com": "Pitchfork",
  "nme.com": "NME",
  "undertheradarmag.com": "Under the Radar",
  "slantmagazine.com": "Slant",
  "popmatters.com": "Pop Matters",
};

function make_links(site_list: Record<string, string>, release: Release) {
  const links: [string, string, string?][] = [];
  for (const site of Object.keys(site_list)) {
    for (const link of release.links) {
      if (link_site(link) == site) {
        const lnk: [string, string, string?] = [link.url, site_list[site]];
        if (site == "rateyourmusic.com" && release_has_score(release, "rym")) {
          lnk.push(` (${release_score(release, "rym")} / 5)`);
        } else if (
          site == "albumoftheyear.org" &&
          release_has_score(release, "aoty") &&
          release_score(release, "aoty") !== "-"
        ) {
          lnk.push(` (${release_score(release, "aoty")})`);
        } else lnk.push("");
        links.push(lnk);
        break;
      }
    }
  }
  return links;
}

const stream_links = make_links(STREAMERS, release);
const other_links = make_links(SITE_NAMES, release);
const review_links = make_links(REVIEWS, release);
---

<Layout
  title={`Release: ${release.title}`}
  og_title={release.title}
  og_description={`${year} ${release_kind(
    release
  ).toLowerCase()} by ${release_artist_names(release)}`}
  og_image={release_image_src(release)}
  og_url={`vermilionsands.org/release/${id}`}
  og_type={"music.album"}
>
  <MainHead>{release_kind(release)}</MainHead>

  <MainName>
    <span class="artist">{release_artist_names(release)}</span>:
    <span class="title">{release.title}</span>
    <!-- <span class="h1">
      {release.which ? ` [${release.which}] ` : ""}
       ({year}{release.label ? ", " : ""}{
        release.label ? release.label.name : ""
      })
    </span> -->
    {release.status == "A*" ? " ‚≠ê" : null}
  </MainName>

  <MainSide>
    <img src={release_image_src(release)} />

    <div class="info">
      released: <a href={`/year/${year}`}>{year}</a>{release.date.substring(4)}
    </div>
    {
      release.label ? (
        <div class="info" style="margin-top: -0.6rem">
          on label:{" "}
          <a href={`/label/${release.label.id}`}>{release.label.name}</a>
        </div>
      ) : null
    }

    {
      release.artists.length > 0 ? (
        <div class="info">
          {release.artists.length == 1 ? "artist: " : "artists: "}
          <SepLinks
            links={release.artists.map((artist) => [
              `/artist/${artist.id}`,
              artist_name(artist),
            ])}
          />
        </div>
      ) : null
    }

    {
      main_genres.length > 0 ? (
        <div class="info">
          {main_genres.length == 1 ? "genre: " : "genres: "}
          <SepLinks
            links={main_genres.map((genre) => [
              `/genre/${genre.id}`,
              genre.name,
            ])}
          />
        </div>
      ) : null
    }
    {
      other_genres.length > 0 ? (
        <div class="info" style="margin-top: -0.6rem">
          with some:
          <SepLinks
            links={other_genres.map((genre) => [
              `/genre/${genre.id}`,
              genre.name,
            ])}
          />
        </div>
      ) : null
    }

    {
      stream_links.length > 0 ? (
        <div class="info">
          listen at: <SepLinks links={stream_links} />
        </div>
      ) : null
    }
    {
      other_links.length > 0 ? (
        <div class="info">
          see also: <SepLinks links={other_links} />
        </div>
      ) : null
    }
    {
      review_links.length > 0 ? (
        <div class="info">
          more reviews: <SepLinks links={review_links} />
        </div>
      ) : null
    }
  </MainSide>

  {
    release.text ? (
      <MainText>
        {release.text.split("\n\n").map((para) =>
          para.startsWith("-") ? (
            <p class="byline">{para.substring(2)}</p>
          ) : (
            <p class="text">
              <FancyPara para={para} />
            </p>
          )
        )}
      </MainText>
    ) : null
  }
</Layout>

<style>
  img {
    margin-bottom: 1.5rem;
  }

  .artist {
    font-weight: 600;
  }

  .title {
    font-style: italic;
    font-weight: 300;
  }

  p.text {
    margin: 0;
    margin-bottom: 0.6rem;
    text-align: justify;
  }

  p.byline {
    margin: 0;
    text-align: right;
  }

  .info {
    margin-bottom: 0.6rem;
    margin-left: 1rem;
    text-indent: -1rem;
  }
</style>
